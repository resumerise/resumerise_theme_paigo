<!DOCTYPE html>
<html class="<%= it.type %>">
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimal-ui">
		<title><%= it.resume.basics?.name ? it.resume.basics.name : ''%></title>
		<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" integrity="sha512-1ycn6IcaQQ40/MKBW2W4Rhis/DbILU74C1vSrLJxCq57o941Ym01SwNsOMqvEBFlcgUa6xLiPY/NS5R+E6ztJQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
		<% if (it.type === 'PRINT') { %>
			<script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
			<script src="https://cdn.jsdelivr.net/npm/@leisn/tocjs@0.1.0/dist/toc.min.js"></script>
			<script src="https://unpkg.com/pagedjs/dist/paged.polyfill.js"></script>
		<% } %>
		<style>
			<%~ it.mainCss %>
			<%~ it.widgetCss %>
		</style>
	</head>
	<body>
		<main class="main">
			<% if (it.type === 'PRINT') { %>
				<!-- cover Page -->
				<%~ include("cover", {
					resume: it.resume
				}) %>
			
				<!-- table of Contents -->
				<%~ include("toc") %>

				<!-- margin boxes (START) -->
				<p class="footer-print">
					<a href="#toc-start"><%= it.resume.settings.labels?.toc %></a>
				</p>
				<p class="user-compact-print">
					<%= it.resume.basics.label %>
				</p>
				<p class="last-update-print">
					<%= it.resume.settings.labels.updatedOn %> <%= it.resume.updated %>
				</p>
				<p class="available-from-print now-available-<% if(it.resume.available) { %> yes <% } else { %>no<% } %>">
					<%= it.resume.settings.labels.availableFrom %> <%= it.resume.availableFrom %> <i class="fas fa-circle icon"></i>
				</p>
				<!-- margin boxes (END) -->
			<% } %>

			<!-- BASICS -->
			<%~ include("basic", {
				resume: it.resume
			}) %>
			
			<!-- PROJECT -->
			<div class="counter-reset"></div>
			<%~ include("project", {
				resume: it.resume
			}) %>

			<!-- WORK -->
			<%~ include("work", {
				resume: it.resume
			}) %>

			<!-- EDUCATION -->
			<%~ include("education", {
				resume: it.resume
			}) %>
			
			<!-- PUBLICATION -->
			<%~ include("publication", {
				resume: it.resume
			}) %>
			
			<!-- REFERENCE -->
			<%~ include("reference", {
				resume: it.resume
			}) %>
			
			<!-- CERTIFICATION -->
			<%~ include("certification", {
				resume: it.resume
			}) %>

			<!-- SKILLS -->
			<%~ include("skills", {
				resume: it.resume
			}) %>
			
			<!-- AWARDS -->
			<%~ include("awards", {
				resume: it.resume
			}) %>
			
			<!-- INTEREST -->
			<%~ include("interest", {
				resume: it.resume
			}) %>

			<!-- LANGUAGE -->
			<%~ include("language", {
				resume: it.resume
			}) %>

			<!-- VOLUNTEER -->
			<%~ include("volunteer", {
				resume: it.resume
			}) %>

			<!-- PROFILE -->
			<%~ include("profile", {
				resume: it.resume
			}) %>
		</main>
		<script>
			<% if (it.type === 'PRINT') { %>
				function createToc(config) {
					const content = config.content;
					const tocElement = config.tocElement;
					const titleElements = config.titleElements;

					let tocElementDiv = content.querySelector(tocElement);
					let tocUl = document.createElement("ul");
					tocUl.id = "list-toc-generated";
					tocElementDiv.appendChild(tocUl);

					// add class to all title elements
					let tocElementNbr = 0;
					for (var i = 0; i < titleElements.length; i++) {

						let titleHierarchy = i + 1;
						let titleElement = content.querySelectorAll(titleElements[i]);


						titleElement.forEach(function (element) {

							// add classes to the element
							element.classList.add("title-element");
							element.setAttribute("data-title-level", titleHierarchy);

							// add id if doesn't exist
							tocElementNbr++;
							idElement = element.id;
							if (idElement == '') {
								element.id = 'title-element-' + tocElementNbr;
							}
							let newIdElement = element.id;

						});

					}

					// create toc list
					let tocElements = content.querySelectorAll(".title-element");

					for (var i = 0; i < tocElements.length; i++) {
						let tocElement = tocElements[i];

						let tocNewLi = document.createElement("li");

						// Add class for the hierarcy of toc
						tocNewLi.classList.add("toc-element");
						tocNewLi.classList.add("toc-element-level-" + tocElement.dataset.titleLevel);

						// Keep class of title elements
						let classTocElement = tocElement.classList;
						for (var n = 0; n < classTocElement.length; n++) {
							if (classTocElement[n] != "title-element") {
								tocNewLi.classList.add(classTocElement[n]);
							}
						}
						// Create the element
						tocNewLi.innerHTML = '<a href="#' + tocElement.id + '">' + tocElement.innerHTML + '</a>';
						tocUl.appendChild(tocNewLi);
					}
				}

				class handlers extends Paged.Handler {
					constructor(chunker, polisher, caller) {
						super(chunker, polisher, caller);
					}

					beforeParsed(content) {
						createToc({
							content: content,
							tocElement: '#toc',
							titleElements: ['header:not(.section--hide-toc)', '.article__title']
						});
					}
				};
				Paged.registerHandlers(handlers);
			<% } %>
		</script>
	</body>
</html>
